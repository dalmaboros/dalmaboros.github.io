I"°<p>The process of creating my Rails Portfolio project was drawn out and full of mistakes. It started with an idea. I wanted to have a bowl in real life, fill it with scraps of paper, each with an activity written on it. In my downtime I could pull a random scrap from the bowl, and do the activity written on it, filling my free time with productive things. Bowls is a digitized version of that idea.</p>

<p>I find myself making hand-written notes to capture all the pieces of a web app floating around in my brain. There are so many moving parts to a web app that it really helps make space in my mind for next steps in the process. Here is my first note (complete with irrelevant doodles):</p>

<p><img src="https://i.imgur.com/OMS0IGN.jpg" width="500px" /></p>

<p>For me, the most logical starting point is mapping out the models and their associations. In this case, itâ€™s pretty uncomplicated with only three models: <code class="highlighter-rouge">Bowl</code>, <code class="highlighter-rouge">Scrap</code>, and <code class="highlighter-rouge">User</code>. A User has many <code class="highlighter-rouge">Bowls</code> and <code class="highlighter-rouge">Scraps</code>. And <code class="highlighter-rouge">Bowls</code> and <code class="highlighter-rouge">Scraps</code> have a many-to-many relationship with each other, expressed through a <code class="highlighter-rouge">Bowl_Scrap</code> model.</p>

<p>Next, I jump right to the views because I want to think about what the app is ultimately going to do and how itâ€™s going to be, and then code the blank inbetween parts. So I made the routes and actions as I went, relying heavily the Rails exceptions the app threw at me along the way.</p>

<p>Again, I made hand-written diagrams to map out how I wanted Bowls to behave:</p>

<p><img src="https://i.imgur.com/UCyQyuQ.jpg" width="500px" /></p>

<p>Once I had all the views and CRUD actions I needed solidified, I made a function that lets you pull a random scrap from a bowl. I also made a scope method that shows you all the scraps that have no bowl. I also implemented OmniAuth with Devise, which was a lot more difficult than I expected, but I managed with a considerable amount of help from Google and Stack Exchange.</p>

<p>The finishing touch was refactoring the code a little bit, and DRYing it up. Then I recorded a video walkthrough showing how to use the app, which actually revealed a bunch of little bugs that needed fixing.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/o_QCkHA5JUw" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen=""></iframe>

<p><strong>Some things I noticed:</strong></p>

<p>I didnâ€™t implement every feature I wanted (like multi-strategy OmniAuth), because some things were just a little too involved, and I needed to strike a balance between functional enough and spending too much time on functionality thatâ€™s not totally crucial.</p>

<p>Next time I would save the styling for the end of the project, once the functionality of the app is finished, because it feels a little too scattered to work on both simultaneously.</p>

<p>I will always always make hand-written notes and diagrams!</p>

<p>This stuff is really hard, and thatâ€™s okay!</p>
:ET